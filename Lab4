#a
#!/usr/bin/env python3

def join_sets(s1, s2):
    # join_sets will return a set that contains every value from both s1 and s2
    return(s1 | s2)

def match_sets(s1, s2):
    # match_sets will return a set that contains all values found in both s1 and s2
    return(s1 & s2)

def diff_sets(s1, s2):
    # diff_sets will return a set that contains all different values which are not shared between the sets
    return(s1 ^ s2)

if __name__ == '__main__':
    set1 = set(range(1,10))
    set2 = set(range(5,15))
    print('set1: ', set1)
    print('set2: ', set2)
    print('join: ', join_sets(set1, set2))
    print('match: ', match_sets(set1, set2))
    print('diff: ', diff_sets(set1, set2))


#b
#!/usr/bin/env python3

def join_lists(l1, l2):
    # join_lists will return a list that contains every value from both l1 and l2
    x = (set(l1) | set(l2))
    join = list(x)
    return(join)

def match_lists(l1, l2):
    # match_lists will return a list that contains all values found in both l1 and l2
    y = (set(l1) & set(l2))
    match = list(y)
    return(match)

def diff_lists(l1, l2):
    # diff_lists will return a list that contains all different values, which are not shared between the lists
    z = (set(l1) ^ set(l2))
    diff = list(z)
    return(diff)

if __name__ == '__main__':
    list1 = list(range(1,10))
    list2 = list(range(5,15))
    print('list1: ', list1)
    print('list2: ', list2)
    print('join: ', join_lists(list1, list2))
    print('match: ', match_lists(list1, list2))
    print('diff: ', diff_lists(list1, list2))


#c
#!/usr/bin/env python3

# Dictionaries
dict_york = {'Address': '70 The Pond Rd', 'City': 'Toronto', 'Country': 'Canada', 'Postal Code': 'M3J3M6', 'Province': 'ON'}
dict_newnham = {'Address': '1750 Finch Ave E', 'City': 'Toronto', 'Country': 'Canada', 'Postal Code': 'M2J2X5', 'Province': 'ON'}

# Lists
list_keys = ['Address', 'City', 'Country', 'Postal Code', 'Province']
list_values = ['70 The Pond Rd', 'Toronto', 'Canada', 'M3J3M6', 'ON']

def create_dictionary(keys, values):
    # Place code here - refer to function specifics in section below
    x = {}
    for item in range(0, len(keys)):
        x[keys[item]] = values[item]
    return x

def shared_values(dict1, dict2):
    # Place code here - refer to function specifics in section below
    syork = set(dict1.values())
    snewnham = set(dict2.values())
    share = syork & snewnham
    return share

if __name__ == '__main__':
    york = create_dictionary(list_keys, list_values)
    print('York: ', york)
    common = shared_values(dict_york, dict_newnham)
    print('Shared Values', common)


#d
#!/usr/bin/env python3
# Strings 1

str1 = 'Hello World!!'
str2 = 'Seneca College'

num1 = 1500
num2 = 1.50

def first_five(arg):
    # Place code here - refer to function specifics in section below
    a = arg[0:5]
    return a

def last_seven(arg):
    # Place code here - refer to function specifics in section below
    b = arg[-7:]
    return b

def middle_number(arg):
    # Place code here - refer to function specifics in section below
    c = str(arg)[1] + str(arg)[2]
    return c

def first_three_last_three(arg1, arg2):
    # Place code here - refer to function specifics in section below
    d = str(arg1)[0:3] + str(arg2)[-3:]
    return d

if __name__ == '__main__':
    print(first_five(str1))
    print(first_five(str2))
    print(last_seven(str1))
    print(last_seven(str2))
    print(middle_number(num1))
    print(middle_number(num2))
    print(first_three_last_three(str1, str2))
    print(first_three_last_three(str2, str1))


